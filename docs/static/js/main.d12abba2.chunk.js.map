{"version":3,"sources":["components/Nav.js","components/Page.js","data.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","size","React","useContext","ResponsiveContext","themeChecked","onThemeChange","Box","tag","direction","align","justify","width","alignSelf","gap","pad","left","right","vertical","RoutedAnchor","path","icon","Cloud","label","Text","Button","plain","href","target","hover","horizontal","round","background","CheckBox","toggle","checked","onChange","Page","children","margin","top","data","name","provider","github","terraform","desc","image","THEMES","grommet","dark","App","useState","themeName","setThemeName","setThemeChecked","Grommet","theme","flex","Heading","level","textAlign","Paragraph","wrap","map","offensiveModule","index","Card","key","CardBody","Image","fit","src","weight","CardFooter","Github","color","hoverIndicator","More","role","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d12abba2.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Box,\n  Text,\n  ResponsiveContext,\n  RoutedAnchor,\n  Button,\n  CheckBox,\n} from \"grommet\";\nimport { Cloud } from \"grommet-icons\";\n\nconst Nav = (props) => {\n  const size = React.useContext(ResponsiveContext);\n  const { themeChecked, onThemeChange } = props;\n\n  const handleThemeChange = () => {\n    onThemeChange(!themeChecked);\n  };\n\n  return (\n    <Box\n      tag=\"header\"\n      direction=\"row\"\n      align=\"center\"\n      justify=\"between\"\n      width=\"xlarge\"\n      alignSelf=\"center\"\n      gap=\"medium\"\n      pad={{ left: \"medium\", right: \"small\", vertical: \"small\" }}\n      {...props}\n    >\n      <RoutedAnchor\n        path=\"/\"\n        icon={<Cloud size=\"large\" />}\n        label={\n          size !== \"small\" && <Text size=\"xlarge\">Offensive Terraform</Text>\n        }\n      />\n      <Box direction=\"row\" gap=\"small\">\n        <Button\n          plain\n          href=\"https://registry.terraform.io/namespaces/offensive-terraform\"\n          target=\"_blank\"\n        >\n          {({ hover }) => (\n            <Box\n              pad={{ vertical: \"small\", horizontal: \"medium\" }}\n              round=\"xlarge\"\n              background={hover ? \"active\" : \"control\"}\n            >\n              <Text>Modules</Text>\n            </Box>\n          )}\n        </Button>\n        <CheckBox toggle checked={themeChecked} onChange={handleThemeChange} />\n      </Box>\n    </Box>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport { Box } from \"grommet\";\nimport Nav from \"./Nav\";\n\nconst Page = ({ children, background, themeChecked, onThemeChange }) => (\n  <Box pad=\"large\" background={background}>\n    <Box>\n      <Nav themeChecked={themeChecked} onThemeChange={onThemeChange} />\n      <Box margin={{ top: \"large\" }}>{children}</Box>\n    </Box>\n  </Box>\n);\n\nPage.propTypes = Box.propTypes;\n\nexport default Page;\n","const data = [\n  {\n    name: \"EC2 Instance Credential Exfiltration\",\n    provider: \"AWS\",\n    github:\n      \"https://github.com/offensive-terraform/terraform-aws-ec2-instance-credential-exfiltration\",\n    terraform:\n      \"https://registry.terraform.io/modules/offensive-terraform/ec2-instance-credential-exfiltration/aws\",\n    desc:\n      \"Offensive Terraform module which creates EC2 instance and exfiltrate credential from Instance metadata to external URL.\",\n    image:\n      \"https://raw.githubusercontent.com/offensive-terraform/terraform-aws-ec2-instance-credential-exfiltration/master/diagram.jpg\",\n  },\n  {\n    name: \"Cross Account Persistence\",\n    provider: \"AWS\",\n    github:\n      \"https://github.com/offensive-terraform/terraform-aws-cross-account-persistence\",\n    terraform:\n      \"https://registry.terraform.io/modules/offensive-terraform/cross-account-persistence/aws\",\n    desc:\n      \"Offensive Terraform module which creates an IAM role with trust relationship with attacker's AWS account and attaches managed IAM Policy to an IAM role.\",\n    image:\n      \"https://raw.githubusercontent.com/offensive-terraform/terraform-aws-cross-account-persistence/master/diagram.jpg\",\n  },\n  {\n    name: \"IAM Create User Persistence\",\n    provider: \"AWS\",\n    github:\n      \"https://github.com/offensive-terraform/terraform-aws-iam-create-user-persistence\",\n    terraform:\n      \"https://registry.terraform.io/modules/offensive-terraform/cross-account-persistence/aws\",\n    desc:\n      \"Offensive Terraform module which creates an IAM user and an access key then attaches managed IAM Policy to an IAM user.\",\n    image:\n      \"https://raw.githubusercontent.com/offensive-terraform/terraform-aws-iam-create-user-persistence/master/diagram.jpg\",\n  },\n  {\n    name: \"EC2 Instance Reverse Shell\",\n    provider: \"AWS\",\n    github:\n      \"https://github.com/offensive-terraform/terraform-aws-ec2-instance-reverse-shell\",\n    terraform:\n      \"https://registry.terraform.io/modules/offensive-terraform/ec2-instance-reverse-shell/aws/\",\n    desc:\n      \"Offensive Terraform module which creates EC2 instance and reverse shell from an EC2 instance to attacker machine.\",\n    image:\n      \"https://raw.githubusercontent.com/offensive-terraform/terraform-aws-ec2-instance-reverse-shell/master/diagram.jpg\",\n  },\n  {\n    name: \"S3 Subdomain Takeover\",\n    provider: \"AWS\",\n    github:\n      \"https://github.com/offensive-terraform/terraform-aws-s3-subdomain-takeover\",\n    terraform:\n      \"https://registry.terraform.io/modules/offensive-terraform/s3-subdomain-takeover/aws\",\n    desc:\n      \"Offensive Terraform module which takes over a subdomain which has a CNAME record pointing to non-existing S3 bucket in target's Route53. The module creates a S3 bucket with a name as subdomain in the specific AWS region that CNAME record is pointing to. Also, it uploads a simple web page with '404 Page Not Found' text.\",\n    image:\n      \"https://raw.githubusercontent.com/offensive-terraform/terraform-aws-s3-subdomain-takeover/master/diagram.jpg\",\n  },\n  {\n    name: \"Lambda Function Credential Exfiltration\",\n    provider: \"AWS\",\n    github:\n      \"https://github.com/offensive-terraform/terraform-aws-lambda-function-credential-exfiltration\",\n    terraform:\n      \"https://registry.terraform.io/modules/offensive-terraform/lambda-function-credential-exfiltration/aws\",\n    desc:\n      \"Offensive Terraform module which creates Lambda function with existing IAM role. The module invokes it automatically to exfiltrate AWS temporary credential from environment variables and send it back with response.\",\n    image:\n      \"https://raw.githubusercontent.com/offensive-terraform/terraform-aws-lambda-function-credential-exfiltration/master/diagram.jpg\",\n  },\n];\n\nexport default data;\n","import React from \"react\";\nimport {\n  Box,\n  Grommet,\n  Heading,\n  Paragraph,\n  Card,\n  CardBody,\n  CardFooter,\n  Text,\n  Image,\n  Button,\n} from \"grommet\";\nimport { Github, More } from \"grommet-icons\";\nimport { grommet, dark } from \"grommet/themes\";\nimport Page from \"./components/Page\";\nimport data from \"./data\";\n\nconst THEMES = {\n  grommet,\n  dark,\n};\n\nfunction App() {\n  const [themeName, setThemeName] = React.useState(\"grommet\");\n  const [themeChecked, setThemeChecked] = React.useState(true);\n\n  const handleThemeChange = (checked) => {\n    if (checked) {\n      setThemeName(\"grommet\");\n    } else {\n      setThemeName(\"dark\");\n    }\n    setThemeChecked(checked);\n  };\n\n  return (\n    <Grommet theme={THEMES[themeName || \"grommet\"]}>\n      <Page themeChecked={themeChecked} onThemeChange={handleThemeChange}>\n        <Box flex align=\"center\" justify=\"center\">\n          <Heading level=\"1\" size=\"large\" textAlign=\"center\" margin=\"none\">\n            Offensive Terraform Modules\n          </Heading>\n          <Paragraph size=\"xxlarge\" textAlign=\"center\">\n            Automated multi step offensive attack modules with Infrastructure as\n            Code(IAC)\n          </Paragraph>\n        </Box>\n        <Box>\n          <Box flex direction=\"row\" justify=\"center\" wrap={true}>\n            {data.map((offensiveModule, index) => (\n              <Card\n                margin=\"small\"\n                width=\"327px\"\n                background=\"light-1\"\n                key={index}\n              >\n                <CardBody>\n                  <Image\n                    width=\"327px\"\n                    fit=\"cover\"\n                    src={offensiveModule.image}\n                  />\n                  <Box\n                    direction=\"row\"\n                    gap=\"small\"\n                    margin=\"small\"\n                    align=\"center\"\n                  >\n                    <Image\n                      width=\"50px\"\n                      src={\n                        offensiveModule.provider === \"AWS\" ? \"./aws.png\" : \"\"\n                      }\n                    />\n                    <Box>\n                      <Text size=\"small\" weight=\"bold\">\n                        {offensiveModule.name}\n                      </Text>\n                    </Box>\n                  </Box>\n                  <Box margin=\"small\" gap=\"small\" align=\"center\">\n                    <Text size=\"small\">{offensiveModule.desc}</Text>\n                  </Box>\n                </CardBody>\n                <CardFooter\n                  pad={{ horizontal: \"small\" }}\n                  direction=\"row\"\n                  justify=\"between\"\n                  align=\"center\"\n                  background=\"light-2\"\n                >\n                  <Button\n                    icon={<Github color=\"plain\" />}\n                    href={offensiveModule.github}\n                    target=\"_blank\"\n                    hoverIndicator\n                  />\n                  <Button\n                    icon={<More color=\"brand\" />}\n                    href={offensiveModule.terraform}\n                    target=\"_blank\"\n                    hoverIndicator\n                  />\n                </CardFooter>\n              </Card>\n            ))}\n          </Box>\n        </Box>\n        <Box>\n          <Heading level=\"1\" size=\"large\" textAlign=\"center\">\n            <span role=\"img\" aria-label=\"happy hacking\">\n              🤘🤩\n            </span>{\" \"}\n            Happy Hacking!\n          </Heading>\n        </Box>\n      </Page>\n    </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}