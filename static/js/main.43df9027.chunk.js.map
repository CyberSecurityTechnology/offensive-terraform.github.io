{"version":3,"sources":["firebase.js","components/Page.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","Nav","lazy","Page","children","background","themeChecked","onThemeChange","Box","pad","margin","top","THEMES","grommet","dark","App","React","useState","themeName","setThemeName","setThemeChecked","data","setData","useEffect","a","db","firestore","collection","get","response","docs","map","doc","fetchData","Grommet","theme","checked","flex","align","justify","Heading","level","size","textAlign","Paragraph","direction","wrap","offensiveModule","index","Card","width","key","CardBody","Image","fit","src","image","alt","desc","gap","provider","Text","weight","name","CardFooter","horizontal","Button","icon","Github","color","href","github","target","rel","hoverIndicator","More","terraform","role","aria-label","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6YAeAA,IAASC,cAXc,CACrBC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjBT,IAASU,YAEMV,QAAf,ECfMW,EAAMC,gBAAK,kBAAM,gCAaRC,EAXF,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,WAAYC,EAAzB,EAAyBA,aAAcC,EAAvC,EAAuCA,cAAvC,OACX,kBAACC,EAAA,EAAD,CAAKC,IAAI,QAAQJ,WAAYA,GAC3B,kBAACG,EAAA,EAAD,KACE,kBAACP,EAAD,CAAKK,aAAcA,EAAcC,cAAeA,IAChD,kBAACC,EAAA,EAAD,CAAKE,OAAQ,CAAEC,IAAK,UAAYP,MCWhCQ,EAAS,CACbC,kBACAC,aA2HaC,MAxHf,WAAgB,IAAD,EACqBC,IAAMC,SAAS,WADpC,mBACNC,EADM,KACKC,EADL,OAE2BH,IAAMC,UAAS,GAF1C,mBAENX,EAFM,KAEQc,EAFR,OAGWJ,IAAMC,SAAS,IAH1B,mBAGNI,EAHM,KAGAC,EAHA,KAuBb,OAlBAN,IAAMO,WAAU,YACC,uCAAG,8BAAAC,EAAA,6DACVC,EAAKnC,EAASoC,YADJ,SAEOD,EAAGE,WAAW,WAAWC,MAFhC,OAEVC,EAFU,OAGhBP,EAAQO,EAASC,KAAKC,KAAI,SAACC,GAAD,OAASA,EAAIX,WAHvB,2CAAH,qDAKfY,KACC,IAYD,kBAACC,EAAA,EAAD,CAASC,MAAOvB,EAAOM,GAAa,YAClC,kBAAC,EAAD,CAAMZ,aAAcA,EAAcC,cAXZ,SAAC6B,GAEvBjB,EADEiB,EACW,UAEA,QAEfhB,EAAgBgB,KAMZ,kBAAC5B,EAAA,EAAD,CAAK6B,MAAI,EAACC,MAAM,SAASC,QAAQ,UAC/B,kBAACC,EAAA,EAAD,CAASC,MAAM,IAAIC,KAAK,QAAQC,UAAU,SAASjC,OAAO,QAA1D,+BAGA,kBAACkC,EAAA,EAAD,CAAWF,KAAK,UAAUC,UAAU,UAApC,mFAKF,kBAACnC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAK6B,MAAI,EAACQ,UAAU,MAAMN,QAAQ,SAASO,MAAM,GAC9CzB,EAAKU,KAAI,SAACgB,EAAiBC,GAAlB,OACR,kBAACC,EAAA,EAAD,CACEvC,OAAO,QACPwC,MAAM,QACN7C,WAAW,UACX8C,IAAKH,GAEL,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEH,MAAM,QACNI,IAAI,QACJC,IAAKR,EAAgBS,MACrBC,IAAKV,EAAgBW,OAEvB,kBAAClD,EAAA,EAAD,CACEqC,UAAU,MACVc,IAAI,QACJjD,OAAO,QACP4B,MAAM,UAEN,kBAACe,EAAA,EAAD,CACEH,MAAM,OACNK,IAC+B,QAA7BR,EAAgBa,SAAqB,YAAc,GAErDH,IAC+B,QAA7BV,EAAgBa,SACZ,4CACA,KAGR,kBAACpD,EAAA,EAAD,KACE,kBAACqD,EAAA,EAAD,CAAMnB,KAAK,QAAQoB,OAAO,QACvBf,EAAgBgB,QAIvB,kBAACvD,EAAA,EAAD,CAAKE,OAAO,QAAQiD,IAAI,QAAQrB,MAAM,UACpC,kBAACuB,EAAA,EAAD,CAAMnB,KAAK,SAASK,EAAgBW,QAGxC,kBAACM,EAAA,EAAD,CACEvD,IAAK,CAAEwD,WAAY,SACnBpB,UAAU,MACVN,QAAQ,UACRD,MAAM,SACNjC,WAAW,WAEX,kBAAC6D,EAAA,EAAD,CACEC,KAAM,kBAACC,EAAA,EAAD,CAAQC,MAAM,UACpBC,KAAMvB,EAAgBwB,OACtBC,OAAO,SACPC,IAAI,aACJC,gBAAc,IAEhB,kBAACR,EAAA,EAAD,CACEC,KAAM,kBAACQ,EAAA,EAAD,CAAMN,MAAM,UAClBC,KAAMvB,EAAgB6B,UACtBJ,OAAO,SACPC,IAAI,aACJC,gBAAc,WAO1B,kBAAClE,EAAA,EAAD,KACE,kBAACgC,EAAA,EAAD,CAASC,MAAM,IAAIC,KAAK,QAAQC,UAAU,UACxC,0BAAMkC,KAAK,MAAMC,aAAW,iBAA5B,gBADF,iBAKE,0BAAMD,KAAK,MAAMC,aAAW,iBAA5B,qBC3HNC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC3FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDanB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,GAAwB9B,OAAOC,SAASZ,MACpD0C,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMyB,GAAN,sBAEPhC,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAA9D,GAEJ,IAAMuF,EAAcvF,EAASsF,QAAQvF,IAAI,gBAEnB,MAApBC,EAASwF,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7BV,OAAOC,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCnC/BE,K","file":"static/js/main.43df9027.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/analytics\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDGR1t04Vea4k_51vqBbqWRMUYLZeJgy8o\",\n  authDomain: \"offensive-terraform.firebaseapp.com\",\n  databaseURL: \"https://offensive-terraform.firebaseio.com\",\n  projectId: \"offensive-terraform\",\n  storageBucket: \"offensive-terraform.appspot.com\",\n  messagingSenderId: \"556600256441\",\n  appId: \"1:556600256441:web:6a17fe02846490f8b87868\",\n  measurementId: \"G-DEWDK2DB9R\",\n};\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase;\n","import React, { lazy } from \"react\";\nimport { Box } from \"grommet\";\n\nconst Nav = lazy(() => import(\"./Nav\"));\n\nconst Page = ({ children, background, themeChecked, onThemeChange }) => (\n  <Box pad=\"large\" background={background}>\n    <Box>\n      <Nav themeChecked={themeChecked} onThemeChange={onThemeChange} />\n      <Box margin={{ top: \"large\" }}>{children}</Box>\n    </Box>\n  </Box>\n);\n\nPage.propTypes = Box.propTypes;\n\nexport default Page;\n","import React from \"react\";\nimport {\n  Box,\n  Grommet,\n  Heading,\n  Paragraph,\n  Card,\n  CardBody,\n  CardFooter,\n  Text,\n  Image,\n  Button,\n} from \"grommet\";\nimport { Github, More } from \"grommet-icons\";\nimport { grommet, dark } from \"grommet/themes\";\nimport firebase from \"./firebase\";\n\nimport Page from \"./components/Page\";\n// import data from \"./data\";\n\nconst THEMES = {\n  grommet,\n  dark,\n};\n\nfunction App() {\n  const [themeName, setThemeName] = React.useState(\"grommet\");\n  const [themeChecked, setThemeChecked] = React.useState(true);\n  const [data, setData] = React.useState([]);\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      const db = firebase.firestore();\n      const response = await db.collection(\"modules\").get();\n      setData(response.docs.map((doc) => doc.data()));\n    };\n    fetchData();\n  }, []);\n\n  const handleThemeChange = (checked) => {\n    if (checked) {\n      setThemeName(\"grommet\");\n    } else {\n      setThemeName(\"dark\");\n    }\n    setThemeChecked(checked);\n  };\n\n  return (\n    <Grommet theme={THEMES[themeName || \"grommet\"]}>\n      <Page themeChecked={themeChecked} onThemeChange={handleThemeChange}>\n        <Box flex align=\"center\" justify=\"center\">\n          <Heading level=\"1\" size=\"large\" textAlign=\"center\" margin=\"none\">\n            Offensive Terraform Modules\n          </Heading>\n          <Paragraph size=\"xxlarge\" textAlign=\"center\">\n            Automated multi step offensive attack modules with Infrastructure as\n            Code(IAC)\n          </Paragraph>\n        </Box>\n        <Box>\n          <Box flex direction=\"row\" justify=\"center\" wrap={true}>\n            {data.map((offensiveModule, index) => (\n              <Card\n                margin=\"small\"\n                width=\"327px\"\n                background=\"light-1\"\n                key={index}\n              >\n                <CardBody>\n                  <Image\n                    width=\"327px\"\n                    fit=\"cover\"\n                    src={offensiveModule.image}\n                    alt={offensiveModule.desc}\n                  />\n                  <Box\n                    direction=\"row\"\n                    gap=\"small\"\n                    margin=\"small\"\n                    align=\"center\"\n                  >\n                    <Image\n                      width=\"50px\"\n                      src={\n                        offensiveModule.provider === \"AWS\" ? \"./aws.png\" : \"\"\n                      }\n                      alt={\n                        offensiveModule.provider === \"AWS\"\n                          ? \"Offensive Terraform Modules for AWS Cloud\"\n                          : \"\"\n                      }\n                    />\n                    <Box>\n                      <Text size=\"small\" weight=\"bold\">\n                        {offensiveModule.name}\n                      </Text>\n                    </Box>\n                  </Box>\n                  <Box margin=\"small\" gap=\"small\" align=\"center\">\n                    <Text size=\"small\">{offensiveModule.desc}</Text>\n                  </Box>\n                </CardBody>\n                <CardFooter\n                  pad={{ horizontal: \"small\" }}\n                  direction=\"row\"\n                  justify=\"between\"\n                  align=\"center\"\n                  background=\"light-2\"\n                >\n                  <Button\n                    icon={<Github color=\"plain\" />}\n                    href={offensiveModule.github}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    hoverIndicator\n                  />\n                  <Button\n                    icon={<More color=\"brand\" />}\n                    href={offensiveModule.terraform}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    hoverIndicator\n                  />\n                </CardFooter>\n              </Card>\n            ))}\n          </Box>\n        </Box>\n        <Box>\n          <Heading level=\"1\" size=\"large\" textAlign=\"center\">\n            <span role=\"img\" aria-label=\"happy hacking\">\n              🤘\n            </span>\n            Happy Hacking!\n            <span role=\"img\" aria-label=\"happy hacking\">\n              🤩\n            </span>\n          </Heading>\n        </Box>\n      </Page>\n    </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}